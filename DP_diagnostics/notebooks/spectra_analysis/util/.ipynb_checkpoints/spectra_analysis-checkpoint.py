"""
spectra_util.py

code of vertical velocity spectra analysis
originally from Rachel Atlas
adapted by Sami Turbeville @smturbev
"""

import pickle
import xarray as xr
import numpy as np
import metpy.calc as mpcalc
from metpy.units import units
from geopy.distance import geodesic

from . import calc


def calculate_wspectra(file_name, var_name, lev, lat_name="lat", lon_name="lon",
                       res=(3.33,3.33), latlon_bnds=(-5,5,143,153),
                      ):
    """ 
    Default values set to SCREAM default settings
    """
    lat_res=res[0]
    lon_res=res[1]
    lat0=latlon_bnds[0]
    lat1=latlon_bnds[1]
    lon0=latlon_bnds[2]
    lon1=latlon_bnds[3]
    
    height_index = lev
    
    # Interpolate to a rectangular grid
    # that is much finer than the real resolution
    # to capture all variability
    
    lon1d=np.arange(lon0,lon1,0.01)
    lat1d=np.arange(lat0,lat0,0.01)
    lat_interp=np.zeros((1001,1001))
    lon_interp=np.zeros((1001,1001))
    
    for i in range(1001):
      lat_interp[i,:]=lat1d
      lon_interp[:,i]=lon1d

def calc_geodesic_distance(latlon0, latlon1):
    """ Calculates the distance between two points
        given in (lon) coords, returns the distance
        in kilometers
        Uses metpy package
    """
    return( geodesic(latlon0, latlon1).km * units.km)


######################################
#### ---    open from file    --- ####
######################################

def open_attrex_twp(file_dir=None):
    """Loads ATTREX spectrum detrended data from TWP region,
       Requires file generated by Rachel Atlas: 
           "ATTREX_spectrum_detrended_100km_TWP_only"

       Returns:
       xarray.Dataset  : an xarray dataset with dimentions for x
                         then the percentiles are saved as different variables
                         'p05', 'p25', 'p50', 'p75', 'p95'
    """
                         
    #This loads saved ATTREX spectra
    if file_dir is None:
        fn='ATTREX_spectrum_detrended_100km_TWP_only'
    else:
        fn=file_dir+'/ATTREX_spectrum_detrended_100km_TWP_only'
    with open(fn,'rb') as fid:
      Lib=pickle.load(fid)
    
    #load ATTREX spectra statistics
    xaxis=Lib['xaxis'][:]
    p05=xr.DataArray(Lib['p05'][:], 
                     dims=['wavelength'],
                     coords={'wavelength':xaxis},
                     attrs={'long_name':'5th percentile of ATTREX power spectrum'})
    p25=xr.DataArray(Lib['p25'][:],
                     dims=['wavelength'],
                     coords={'wavelength':xaxis},
                     attrs={'long_name':'25th percentile of ATTREX power spectrum'})
    p50=xr.DataArray(Lib['median'][:],
                     dims=['wavelength'],
                     coords={'wavelength':xaxis},
                     attrs={'long_name':'50th percentile of ATTREX power spectrum'})
    p75=xr.DataArray(Lib['p75'][:], 
                     dims=['wavelength'],
                     coords={'wavelength':xaxis},
                     attrs={'long_name':'75th percentile of ATTREX power spectrum'})
    p95=xr.DataArray(Lib['p95'][:], 
                     dims=['wavelength'],
                     coords={'wavelength':xaxis},
                     attrs={'long_name':'95th percentile of ATTREX power spectrum'})

    ds = xr.Dataset({'p05':p05,'p25':p25,
                     'p50':p50, 
                     'p75':p75, 'p95':p95},
                   attrs={'long_name':'ATTREX_spectrum_detrended_100km_TWP_only',
                          'history':'generated by Rachel Atlas using ATTREX campaign data',
                          'region':'Tropical Western Pacific (TWP)'})
    return ds

def open_w_dataarray(file_name):
    """Returns xarray.DataArray with vertical velocity data from
       given a dataset with omega, temperature, pressure
       
       Set up for SCREAM formatted files (i.e., all variables and 
       timesteps in a single file)
    """
    # load only the variables we need
    ds = xr.open_dataset(file_name)[['OMEGA','T','lat','lon','time']]
    w_ds = calc.omega2w(ds.OMEGA.metpy.quantify(), ds.lev * units.hPa, ds['T'].metpy.quantify())
    ds['W'] = w_ds
    ds['lon'] = pf.fix_longitudes(ds['lon'].isel(time=0))
    ds['lat'] = ds['lat'].isel(time=0)
    ds = ds.set_coords(['lat','lon'])
    return(ds)

