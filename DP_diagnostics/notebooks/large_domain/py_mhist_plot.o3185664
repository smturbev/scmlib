module () {  if [ -z "${LMOD_SH_DBG_ON+x}" ]; then
 case "$-" in 
 *v*x*)
 __lmod_sh_dbg='vx'
 ;;
 *v*)
 __lmod_sh_dbg='v'
 ;;
 *x*)
 __lmod_sh_dbg='x'
 ;;
 esac;
 fi;
 if [ -n "${__lmod_sh_dbg:-}" ]; then
 set +$__lmod_sh_dbg;
 echo "Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod's output" 1>&2;
 fi;
 eval "$($LMOD_CMD shell "$@")" && eval "$(${LMOD_SETTARG_CMD:-:} -s sh)";
 __lmod_my_status=$?;
 if [ -n "${__lmod_sh_dbg:-}" ]; then
 echo "Shell debugging restarted" 1>&2;
 set -$__lmod_sh_dbg;
 fi;
 unset __lmod_sh_dbg;
 return $__lmod_my_status
}
ml () {  eval "$($LMOD_DIR/ml_cmd "$@")"
}
#!/bin/bash -v
#PBS -N py_mhist_plot
#PBS -A UWAS0108
#PBS -j oe
#PBS -k eod
#PBS -q casper
#PBS -M smturbev@uw.edu
#PBS -m be
#PBS -l walltime=00:10:00
#PBS -l select=1:ncpus=1:mem=10GB

### Load Conda/Python module and activate NPL environment
module load conda
Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod's output
Shell debugging restarted
conda activate npl-2023a
PS1='(npl-2023a) '
export PATH='/glade/u/apps/opt/conda/envs/npl-2023a/bin:/glade/u/apps/opt/conda/condabin:/glade/u/apps/casper/23.10/spack/opt/spack/netcdf/4.9.2/oneapi/2023.2.1/gfig/bin:/glade/u/apps/casper/23.10/spack/opt/spack/hdf5/1.12.2/oneapi/2023.2.1/6vf2/bin:/glade/u/apps/casper/23.10/spack/opt/spack/ncarcompilers/1.0.0/oneapi/2023.2.1/mai6/bin/mpi:/glade/u/apps/casper/23.10/spack/opt/spack/openmpi/4.1.6/oneapi/2023.2.1/dgcv/bin:/glade/u/apps/casper/23.10/spack/opt/spack/ucx/1.14.1/gcc/7.5.0/vf2h/bin:/glade/u/apps/common/23.08/spack/opt/spack/cuda/12.2.1/bin:/glade/u/apps/casper/23.10/spack/opt/spack/ncarcompilers/1.0.0/oneapi/2023.2.1/mai6/bin:/glade/u/apps/common/23.08/spack/opt/spack/intel-oneapi-compilers/2023.2.1/compiler/2023.2.1/linux/lib/oclfpga/bin:/glade/u/apps/common/23.08/spack/opt/spack/intel-oneapi-compilers/2023.2.1/compiler/2023.2.1/linux/bin/intel64:/glade/u/apps/common/23.08/spack/opt/spack/intel-oneapi-compilers/2023.2.1/compiler/2023.2.1/linux/bin:/glade/u/apps/casper/23.10/opt/wrappers/bin:/glade/u/apps/casper/23.10/opt/utils/bin:/usr/lib/mit/bin:/opt/pbs/bin:/glade/u/apps/casper/23.10/opt/view/bin:/usr/local/bin:/usr/bin:/sbin:/bin'
export CONDA_PREFIX='/glade/u/apps/opt/conda/envs/npl-2023a'
export CONDA_SHLVL='1'
export CONDA_DEFAULT_ENV='npl-2023a'
export CONDA_PROMPT_MODIFIER='(npl-2023a) '
export CONDA_EXE='/glade/u/apps/opt/conda/bin/conda'
export _CE_M=''
export _CE_CONDA=''
export CONDA_PYTHON_EXE='/glade/u/apps/opt/conda/bin/python'
. "/glade/u/apps/opt/conda/envs/npl-2023a/etc/conda/activate.d/gdal-activate.sh"
#!/bin/bash

# Store existing GDAL env vars and set to this conda env
# so other GDAL installs don't pollute the environment

if [[ -n "$GDAL_DATA" ]]; then
    export _CONDA_SET_GDAL_DATA="$GDAL_DATA"
fi

if [[ -n "$GDAL_DRIVER_PATH" ]]; then
    export _CONDA_SET_GDAL_DRIVER_PATH="$GDAL_DRIVER_PATH"
fi

# On Linux GDAL_DATA is in $CONDA_PREFIX/share/gdal, but
# Windows keeps it in $CONDA_PREFIX/Library/share/gdal
if [ -d "$CONDA_PREFIX/share/gdal" ]; then
    export GDAL_DATA="$CONDA_PREFIX/share/gdal"
    export GDAL_DRIVER_PATH="$CONDA_PREFIX/lib/gdalplugins"
elif [ -d "$CONDA_PREFIX/Library/share/gdal" ]; then
    export GDAL_DATA="$CONDA_PREFIX/Library/share/gdal"
    export GDAL_DRIVER_PATH="$CONDA_PREFIX/Library/lib/gdalplugins"
fi


# Support plugins if the plugin directory exists
# i.e if it has been manually created by the user
if [[ ! -d "$GDAL_DRIVER_PATH" ]]; then
    unset GDAL_DRIVER_PATH
fi

# vsizip does not work without this.
export CPL_ZIP_ENCODING=UTF-8
. "/glade/u/apps/opt/conda/envs/npl-2023a/etc/conda/activate.d/geotiff-activate.sh"
#!/bin/bash

# Store existing GeoTIFF env vars and set to this conda env
# so other GeoTIFF installs don't pollute the environment

if [[ -n "$GEOTIFF_CSV" ]]; then
    export _CONDA_SET_GEOTIFF_CSV="$GEOTIFF_CSV"
fi

# On Linux GEOTIFF_CSV is in $CONDA_PREFIX/share/epsg_csv, but
# Windows keeps it in $CONDA_PREFIX/Library/share/epsg_csv
if [ -d $CONDA_PREFIX/share/epsg_csv ]; then
    export GEOTIFF_CSV="$CONDA_PREFIX/share/epsg_csv"
elif [ -d $CONDA_PREFIX/Library/share/epsg_csv ]; then
    export GEOTIFF_CSV="$CONDA_PREFIX/Library/share/epsg_csv"
fi


. "/glade/u/apps/opt/conda/envs/npl-2023a/etc/conda/activate.d/libglib_activate.sh"
export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP="${GSETTINGS_SCHEMA_DIR:-}"
export GSETTINGS_SCHEMA_DIR="$CONDA_PREFIX/share/glib-2.0/schemas"
. "/glade/u/apps/opt/conda/envs/npl-2023a/etc/conda/activate.d/ncl-activate.sh"
#!/bin/bash
for variable in $(env | grep '^NCARG_');  do
    var_name=$(echo "$variable" | cut -d= -f1)
    var_value="$(echo -n "$variable" | cut -d= -f2-)"
    export OLD_${var_name}="${var_value}"
    unset ${var_name}
done

if [ ! -z "${CONDA_ENV_PATH}" ]; then
    export NCARG_ROOT="$(cd ${CONDA_ENV_PATH} && pwd)"
elif [ ! -z "${CONDA_PREFIX}" ]; then
    export NCARG_ROOT="$(cd ${CONDA_PREFIX} && pwd)"
fi
. "/glade/u/apps/opt/conda/envs/npl-2023a/etc/conda/activate.d/proj4-activate.sh"
#!/bin/sh

# Store existing env vars and set to this conda env
# so other installs don't pollute the environment.

if [ -n "${PROJ_DATA:-}" ]; then
    export _CONDA_SET_PROJ_DATA=$PROJ_DATA
fi


if [ -d "${CONDA_PREFIX}/share/proj" ]; then
  export "PROJ_DATA=${CONDA_PREFIX}/share/proj"
elif [ -d "${CONDA_PREFIX}/Library/share/proj" ]; then
  export PROJ_DATA="${CONDA_PREFIX}/Library/share/proj"
fi

if [ -f "${CONDA_PREFIX}/share/proj/copyright_and_licenses.csv" ]; then
  # proj-data is installed because its license was copied over
  export PROJ_NETWORK="OFF"
else
  export PROJ_NETWORK="ON"
fi
. "/glade/u/apps/opt/conda/envs/npl-2023a/etc/conda/activate.d/udunits2-activate.sh"
#!/usr/bin/env bash

# Store existing env vars and set to this conda env
# so other installs don't pollute the environment.

if [[ -n "$UDUNITS2_XML_PATH" ]]; then
    export _CONDA_SET_UDUNITS2_XML_PATH=$UDUNITS2_XML_PATH
fi

# On Linux the share data is in $CONDA_PREFIX/share, but
# Windows keeps it in $CONDA_PREFIX/Library/share
if [ -d $CONDA_PREFIX/share/udunits ]; then
    export UDUNITS2_XML_PATH=$CONDA_PREFIX/share/udunits/udunits2.xml
elif [ -d $CONDA_PREFIX/Library/share/udunits ]; then
    export UDUNITS2_XML_PATH=$CONDA_PREFIX/Library/share/udunits/udunits2.xml
fi

### Run analysis script
python run_pyscript.sh
  File "/glade/u/home/sturbeville/scmlib/DP_diagnostics/notebooks/large_domain/run_pyscript.sh", line 13
    module load conda
           ^
SyntaxError: invalid syntax

echo "done"
done
